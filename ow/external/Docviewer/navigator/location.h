#ifndef	_LOCATION_H
#define	_LOCATION_H

#ident "@(#)location.h	1.5 11/15/96 Copyright 1990 Sun Microsystems, Inc."


#include "winlist.h"
#include <doc/list.h>
#include <doc/docname.h>


// Forward references.
//
class	ABGROUP;


// Events generated by LOCATION.
//
typedef enum {
	LOCATION_SELECT_EVENT	= 12345
} LOCATION_EVENT;


class	LOCATION : public WINLIST {

    private:
	
	// List of documents in this Location list.
	//
	LIST<DOCNAME>	doclist;

	// Currently selected entry in this Location list.
	//
	int		selected;

	// Event handler and accompanying callback argument for
	// LOCATION events.
	//
	EVENT_HANDLER	event_handler;
	caddr_t		event_arg;

	// AnswerBooks with which we're currently dealing.
	//
	ABGROUP		*abgroup;

	// Current state of this object.
	//
	OBJECT_STATE	objstate;

	// Main event handler.
	//
	void		EventHandler(int event);

	// Event handler for Location list events ("select", "execute").
	// This method is declared "static" because it is used
	// as a callback in an environment where its class is not known.  
	//
	static void	WinListEvent(	int	event_type,
					caddr_t	event_obj,
					caddr_t	client_data);


    public:

	// LOCATION constructor/destructor and initialization routines.
	//
	LOCATION(Xv_opaque panel, int x, int y, ABGROUP *abgroup_arg);
	~LOCATION()				{ }

	// Append document to the bottom of this location list,
	// indented below the preceding document.
	//
	STATUS		AppendDoc(const DOCNAME &docname, ERRSTK &err);

	// Clear this Location list.
	//
	void		Clear();

	// Delete all documents below specified level in this Location list.
	//
	void		ClearBelow(int);

	// Set/get current selection.
	//
	void		SetSelection(int);
	int		GetSelection() const	{ return(selected); }

	// Get the DOCNAME of the document corresponding to
	// the specified entry in this Location list.
	//
	const DOCNAME	&GetDocName(int n)	{ return(doclist[n]); }

	// Get current number of documents in this Location list.
	//
	int		NumDocs() const		{ return(doclist.Count()); }

	// Register event handler for LOCATION events.
	//
	void		SetEventHandler(EVENT_HANDLER func, caddr_t arg)
			{ event_handler = func; event_arg = arg; }
};

#endif	_LOCATION_H
