#
# @(#)Makefile.master	1.50 97/04/04 Copyright (c) 1993 by Sun Microsystems, Inc.

#
# This file is meant to be included in each Makefile associated with
# a particular project.  The following parameters should be defined
# by the including Makefile, as appropriate:
#
#	PROJECTDIR	Top-level project directory
#	LIBRARY		Target library (ie libmail)
#	LIBVERSION	Version number for library (ie ".0.1")
#	PROGRAM		Target program (ie mailtool)
#	SOURCES.G	GUIDE Intermediate Languages
#	SOURCES.c	C code 
#	SOURCES.cc	C++ code 
#	SOURCES_SA.c	C code for .sa portion of dynamic libs
#	SOURCES.icon	Icon files	
#	SOURCES.h	Include files
#	SOURCES.l	Lex files
#	SOURCES.sh	Shell scripts
#	SOURCES.ps	Postscript files			
#	SOURCES.y	Yacc files
#	SOURCES.pkg	SVR4 package files			
# 	SOURCES.man	man page
#	SOURCES.misc	misc					
#	SOURCES.info	Info file	
#	SOURCES.map	Map file for reordering.
#	SOURCES.types	ToolTalk types file
#	SOURCES.tpl	Template files used with mailtool
#	MANSECT		man page section
#	LDLIBS		Additional libraries to load with

#
# Switch build environment based on OS.  Automatically switches
# for 4.1.x or 5.X builds.  Override with:
#
# setenv TARGET_SYS SUNOS	-> SunOS 4.1.1 build
# setenv TARGET_SYS SVR4	-> SunOS 5.0 build
# setenv TARGET_SYS XFP         -> Sundae 5.0 build
#
# Use $TARG_SYS for OS dependent variables
#
TARG_SYS:sh = \
 (					\
   case ${TARGET_SYS}			\
   in ?*) echo ${TARGET_SYS};		\
          exit 0;;			\
   esac;				\
   UNAME=` uname -r 2>/dev/null` ||.;	\
   case $UNAME in			\
   '') echo SUNOS;;			\
   4.*) echo SUNOS;;			\
   *)  echo SVR4;;			\
   esac					\
 )

#
# Get system architecture
#
ARCH:sh         = set `uname -m`;\
		  case $1 in sun4*) echo sun4;; *) echo $1;; esac

# Solaris 2.0 bundles OpenWindows with the environment and
# locates it in /usr/openwin. When compiling under 5.0, either
# don't set OPENWINHOME, or make sure that it is set to
# /usr/openwin so that LD_RUN_PATH (-R) is correct. If OpenWindows
# is located somewhere else, then make a link from /usr/openwin to
# that location before compiling.
WIN_HOME:sh = \
 (					\
   case ${OPENWINHOME}			\
   in ?*) echo ${OPENWINHOME};;		\
       *) echo "/usr/openwin";;		\
   esac;				\
 )

GUIDEHOME:sh	=	echo ${GUIDEHOME:-/usr/dist/local/pkgs/devguide,v3.0.1}

DS_HOME = /usr/deskset

MACH:sh	= uname -p

# libdstt is the new DeskSet ToolTalk library.
# It is new starting with the 4/93 OpenWindows release.
# Previously, this functionality was found in libdeskset.
# If you're compiling on a pre-4/93 system (without libdstt),
# set the NOLIBDSTT environment variable.
#
LIB_DSTT:sh	= [ ${NOLIBDSTT:=NotSet} = NotSet ] && echo '-ldstt' || echo ''

#
# The following macros are used during binary installation
#
SOURCEDIR	= $(PROJECTDIR)/../..
OWVersionFile	= $(SOURCEDIR)/config/OWversion

# Add support for NetISAM schema files (".q")
.SUFFIXES: $(SUFFIXES) .q

# Derived parameters.

SOURCES += \
	$(SOURCES.h) \
	$(SOURCES.l) \
	$(SOURCES.y) \
	$(SOURCES.c) \
	$(SOURCES.cc) \
	$(SOURCES.G) \
	$(SOURCES.icon) \
	$(SOURCES.ps) \
	$(SOURCES.cps) \
	$(SOURCES.psw) \
	$(SOURCES.sh) \
	$(SOURCES.misc) \
	$(SOURCES.man) \
	$(SOURCES.info) \
	$(SOURCES.map) \
	$(SOURCES.types) \
	$(SOURCES.q) \
	$(SOURCES.tpl) \
	$(SOURCES.pkg)

TARGETS.cc = \
	$(SOURCES.G:%.G=%_ui.cc) \
	$(STUBS.G:%.G=%_stubs.cc) \
	$(SOURCES.y:%.y=%.cc)

TARGETS.c = \
	$(SOURCES.l:%.l=%.c) \
	$(SOURCES.q:%.q=%.c)

TARGETS.h = \
	$(SOURCES.G:%.G=%_ui.h) \
	$(SOURCES.q:%.q=%.h) \
	$(SOURCES.psw:%.psw=%_dps.h) \
	$(SOURCES.cps:%.cps=%.h)

TARGETS.other = \
	$(SOURCES.G:%.G=%.info)

TARGETS.sh = \
	$(SOURCES.sh:%.sh=%)

TARGETS = \
	$(TARGETS.other) \
	$(TARGETS.sh) \
	$(TARGETS.h) \
	$(TARGETS.c) \
	$(TARGETS.cc)

ARCHDIR		= $(ARCH)-$(TARG_SYS)
ARCHDIR.g 	= $(ARCHDIR)-g
ARCHDIR.pure	= $(ARCHDIR)-pure
ARCHDIR.xf 	= $(ARCHDIR)-xf
ARCHDIR.pic 	= $(ARCHDIR)-pic
ARCHDIR.pic-g 	= $(ARCHDIR)-pic-g

OBJECTS = \
	$(SOURCES.c:%.c=$(ARCHDIR)/%.o) \
	$(TARGETS.c:%.c=$(ARCHDIR)/%.o) \
	$(SOURCES.cc:%.cc=$(ARCHDIR)/%.o) \
	$(TARGETS.cc:%.cc=$(ARCHDIR)/%.o)

OBJECTS.g = \
	$(SOURCES.c:%.c=$(ARCHDIR.g)/%.o) \
	$(TARGETS.c:%.c=$(ARCHDIR.g)/%.o) \
	$(SOURCES.cc:%.cc=$(ARCHDIR.g)/%.o) \
	$(TARGETS.cc:%.cc=$(ARCHDIR.g)/%.o)

OBJECTS.pure = \
	$(SOURCES.c:%.c=$(ARCHDIR.pure)/%.o) \
	$(TARGETS.c:%.c=$(ARCHDIR.pure)/%.o) \
	$(SOURCES.cc:%.cc=$(ARCHDIR.pure)/%.o) \
	$(TARGETS.cc:%.cc=$(ARCHDIR.pure)/%.o)

OBJECTS.xf = \
	$(SOURCES.c:%.c=$(ARCHDIR.xf)/%.o) \
	$(TARGETS.c:%.c=$(ARCHDIR.xf)/%.o) \
	$(SOURCES.cc:%.cc=$(ARCHDIR.xf)/%.o) \
	$(TARGETS.cc:%.cc=$(ARCHDIR.xf)/%.o)

OBJECTS.pic = \
	$(SOURCES.c:%.c=$(ARCHDIR.pic)/%.o) \
	$(TARGETS.c:%.c=$(ARCHDIR.pic)/%.o) \
	$(SOURCES.cc:%.cc=$(ARCHDIR.pic)/%.o) \
	$(TARGETS.cc:%.cc=$(ARCHDIR.pic)/%.o)

OBJECTS.pic-g = \
	$(SOURCES.c:%.c=$(ARCHDIR.pic-g)/%.o) \
	$(TARGETS.c:%.c=$(ARCHDIR.pic-g)/%.o) \
	$(SOURCES.cc:%.cc=$(ARCHDIR.pic-g)/%.o) \
	$(TARGETS.cc:%.cc=$(ARCHDIR.pic-g)/%.o)

OBJECTS_SA = $(SOURCES_SA.c:%.c=$(ARCHDIR)/%.o)
OBJECTS_SA.g = $(SOURCES_SA.c:%.c=$(ARCHDIR.g)/%.o)
OBJECTS_SA.pure = $(SOURCES_SA.c:%.c=$(ARCHDIR.pure)/%.o)
OBJECTS_SA.xf = $(SOURCES_SA.c:%.c=$(ARCHDIR.xf)/%.o)

#
# Installation destination directories
#
DESTDIR:sh = echo ${DESTDIR:-${OPENWINHOME:?"Neither DESTDIR nor OPENWINHOME is set"}}

DESTDIR.bin	= $(DESTDIR)/bin
DESTDIR.sh	= $(DESTDIR.bin)
DESTDIR.lib	= $(DESTDIR)/lib
DESTDIR.include = $(DESTDIR)/include
DESTDIR.man	= $(DESTDIR)/share/man/man
DESTDIR.info	= $(DESTDIR.lib)/locale/C/help
DESTDIR.ps	= 
DESTDIR.icon	= $(DESTDIR.include)/images
DESTDIR.tpl	= $(DESTDIR)/share/xnews/client/templates
# Not sure where we want .po files to go.  Pick a place for now
DESTDIR.po	= $(DESTDIR.lib)/locale/C/LC_MESSAGES
DESTDIR.tt	= $(DESTDIR)/share/etc/tt

PROGRAM.g 	= $(PROGRAM)-g
PROGRAM.xf 	= $(PROGRAM)-xf
PROGRAM.pure	= $(PROGRAM)-pure
PROGRAM.reorder	= $(PROGRAM)-reorder

LIBRARY.a	= $(LIBRARY).a
LIBRARY.g	= $(LIBRARY.a)-g
LIBRARY.pure	= $(LIBRARY.a)-pure
LIBRARY.sa	= $(LIBRARY).sa$(LIBVERSION)
LIBRARY.so	= $(LIBRARY).so$(LIBVERSION)
LIBRARIES	= $(LIBRARY.a) $(LIBRARY.sa) $(LIBRARY.so)
# If we have a version number then we make symlinks to non-versioned lib name
LIBLINKS = $(LIBRARY).sa $(LIBRARY).so

#
# OS dependent stuff
#
SUNOS_RANLIB 	= ranlib
SVR4_RANLIB	= true
XFP_RANLIB	= true
RANLIB 		= $($(TARG_SYS)_RANLIB)

SUNOS_CPPFLAGS 	+= -DSUNOS41
SVR4_CPPFLAGS 	+= -DSVR4 -DSYSV -DOW_I18N
XFP_CPPFLAGS	+= $(SVR4_CPPFLAGS)

SUNOS_LDFLAGS	+=
SVR4_LDFLAGS 	+= -D__$(MACH) -R /usr/openwin/lib
XFP_LDFLAGS 	+= $(SVR4_LDFLAGS)

SUNOS_LDLIBS 	+= -lce
SVR4_LDLIBS 	+= -lsocket -lnsl -lintl -ldl
XFP_LDLIBS 	+= -lw $(SVR4_LDLIBS)

# For building dynamic libraries
SUNOS_LIB_LDFLAGS 	+= 
SVR4_LIB_LDFLAGS 	+= -G
XFP_LIB_LDFLAGS		+= $(SVR4_LIB_LDFLAGS)
LIB_LDFLAGS		+= $($(TARG_SYS)_LIB_LDFLAGS)

SUNOS_PICFLAGS 	= -pic
SVR4_PICFLAGS 	= -K pic
XFP_PICFLAGS	= $(SVR4_PICFLAGS)
PICFLAGS 	= $($(TARG_SYS)_PICFLAGS)

SUNOS_CC 	= /usr/dist/local/sun4/lang/SC1.0/acc
SVR4_CC 	= cc
XFP_CC 		= $(SVR4_CC)
CC 		= $($(TARG_SYS)_CC)

SUNOS_CCC 	= /usr/dist/local/sun4/lang/SC1.0/CC
SVR4_CCC 	= CC
XFP_CCC 	= $(SVR4_CCC)
CCC 		= $($(TARG_SYS)_CCC)

# Make sure we pick up the SVr4 install.  This means you can't do an install
# in 4.x
INSTALL		= /usr/sbin/install

PURIFYHOME:sh	= echo ${PURIFYHOME:-/net/leaves/export/tools/memory_db/pure-software/purify-2.1-Solaris2.directory}
PURIFYDIR:sh	= echo ${PURIFYDIR:-/net/abstract/builds/purify}
PURIFYFDS:sh	= echo ${PURIFYFDS:-55}
PURIFY		= $(PURIFYHOME)/purify
PURIFYOPTIONS	= -cache-dir=$(PURIFYDIR) -fds=$(PURIFYFDS)

G2CC 		= $(GUIDEHOME)/bin/gxv++
XGETTEXT	= /usr/bin/xgettext
#XGETTEXT_OPTS	= -j -n -c STRING_EXTRACTION -p $(DESTDIR.po) -m "" -
XGETTEXT_OPTS	= -n -p $(DESTDIR.po) -m "" -
TXTDM_PREFIX	= SUNW_DESKSET_ANSWERBOOK_

TT_TYPE_COMP    = $(WIN_HOME)/bin/tt_type_comp
CE_DB_MERGE     = LD_LIBRARY_PATH=$(DESTDIR)/lib:$(XW_HOME)/lib:$$LD_LIBRARY_PATH $(WIN_HOME)/bin/ce_db_merge
PSWRAP		= PATH=$$PATH:$(WIN_HOME)/bin:$(XW_HOME)/bin pswrap -a

# Compiler flags.

PTFLAGS		+=
CCFLAGS		+= $(PTFLAGS)
CPPFLAGS	+= $($(TARG_SYS)_CPPFLAGS) -I$(PROJECTDIR)/include -I$(PROJECTDIR)/include/libdeskset -I$(WIN_HOME)/include -I$(XW_HOME)/include -I. 
#CPPFLAGS	+= -DDPS 
LDFLAGS		+=  $($(TARG_SYS)_LDFLAGS) -L$(PROJECTDIR)/lib -L$(WIN_HOME)/lib -L$(XW_HOME)/lib
LDLIBS		+= $($(TARG_SYS)_LDLIBS) -ldv -ldeskset -lxview -lolgx -lX11 -ljmor
LINTFLAGS	+= -b
G2CCFLAGS	+= -s -n -g

# The "-Bstatic" assures that libC.a gets statically linked.
# This is (currently) necessary since libC.so is not part of the WOS.
# --- As of Solaris 2.4, libC.so IS part of the WOS ---
# We still need the `-L/...' though to find the `libC.so' symlink.
#
#LIBCAPC	= -Bstatic -L/opt/SUNWspro/SC2.0.1 -lC
LIBCAPC		= -L/opt/SUNWspro/lib -lC

# NeWS section:

CPS=$(PROJECTDIR)/build_tools/cps
CPSFLAGS=
.cps.h:
	$(CPS) $(CPSFLAGS) $*.cps

$(PROGRAM)   $(LIBRARY.a)	:= PTFLAGS  += -ptr$(ARCHDIR)/ptrepository
$(PROGRAM.g) $(LIBRARY.g)	:= PTFLAGS  += -ptr$(ARCHDIR.g)/ptrepository
$(PROGRAM.pure)	$(LIBRARY.pure)	:= PTFLAGS  += -ptr$(ARCHDIR.pure)/ptrepository
$(PROGRAM.g) $(LIBRARY.g)	:= CPPFLAGS += -DDEBUG
$(PROGRAM.g) $(LIBRARY.g)	:= CPSFLAGS += -DDEBUG

# Standard targets.

.PRECIOUS: $(LIBRARY.a)
.KEEP_STATE:

# The target "all" must be defined by the tool's own makefile.  master_all is
# here so our first rule is a decent default
master_all: $(TARGETS) $(PROGRAM) $(LIBRARY)
objects:	$(SOURCES.cc)	\
		$(TARGETS.cc)	\
		$(SOURCES.c)	\
		$(TARGETS.c)	\
		$(TARGETS.h)	\
		$(OBJECTS)

sources:	$(SOURCES)
targets:	$(SOURCES) $(TARGETS)

# Create subdirectory for .o's if they aren't there
$(ARCHDIR) $(ARCHDIR.g) $(ARCHDIR.xf) $(ARCHDIR.pic) $(ARCHDIR.pic-g) $(ARCHDIR.pure):
	if [ ! -d $@ ]; then mkdir $@; fi

#
# Guide targets
#
%_ui.cc: %.G
	$(G2CC) $(G2CCFLAGS) $*
%_ui.h: %_ui.cc
	@touch $@
%_stubs.cc: %_ui.cc
	@touch $@
%.info: %_ui.cc
	@touch $@

#
# psw targets
#
%_dps.h: %.psw
	$(CC) -E -Xs -C $(CPPFLAGS) $< | ($(PSWRAP) -h $*_dps.h -o $*_dps.c)
#%_dps.h: %.psw
#	touch $@


#
# NetISAM schema targets
#
UISSCHEMA	=	$(PROJECTDIR)/build_tools/uisschema
UISFLAGS	=	
%.c %.h: %.q
	$(RM) $*.c $*.h
	$(UISSCHEMA) $(UISFLAGS) $<

#
# Yacc ".y" -> ".cc" rules
#
.y.cc:
	$(YACC.y) -d $<
	mv y.tab.c $@
	mv y.tab.h $*.h

#
# Compile .c's and .cc's into .o's
#
$(ARCHDIR)/%.o: %.cc
	$(CCC) -c -O $(CCFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR)/%.o: %.c
	$(CC) -c -O $(CFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.g)/%.o: %.cc
	$(CCC) -c -g $(CCFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.g)/%.o: %.c
	$(CC) -c -g $(CFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.pure)/%.o: %.cc
	$(CCC) -c -g -DMAKE_PURIFY $(CCFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.pure)/%.o: %.c
	$(CC) -c -g -DMAKE_PURIFY $(CFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.xf)/%.o: %.cc
	$(CCC) -c -O -xF $(CCFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.xf)/%.o: %.c
	$(CC) -c -O -xF $(CFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.pic)/%.o: %.cc
	$(CCC) -c -O $(PICFLAGS) $(CCFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.pic)/%.o: %.c
	$(CC) -c -O $(PICFLAGS) $(CFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.pic-g)/%.o: %.cc
	$(CCC) -c -g $(PICFLAGS) $(CCFLAGS) $(CPPFLAGS) $< -o $@

$(ARCHDIR.pic-g)/%.o: %.c
	$(CC) -c -g $(PICFLAGS) $(CFLAGS) $(CPPFLAGS) $< -o $@

#
# Link .o's into executables.  The executables reside in ARCHDIR. POST_LINK
# lets tool specific makefiles do processing after the link -- mailtool
# inserts build time/date for example.
#
$(ARCHDIR)/$(PROGRAM): $(ARCHDIR) $(SOURCES) $(TARGETS) $(OBJECTS)
	$(LINK.cc) $(OBJECTS) $(LDLIBS) -Bdynamic -lc ${LIBCAPC} -o $@
	@$(POST_LINK)

$(ARCHDIR.g)/$(PROGRAM.g): $(ARCHDIR.g) $(SOURCES) $(TARGETS) $(OBJECTS.g)
	$(LINK.cc) $(OBJECTS.g) $(LDLIBS) -Bdynamic -lc ${LIBCAPC} -o $@
	@$(POST_LINK)

$(ARCHDIR.xf)/$(PROGRAM.xf): $(ARCHDIR.xf) $(SOURCES) $(TARGETS) $(OBJECTS.xf)
	$(LINK.cc) $(OBJECTS.xf) $(LDLIBS) -Bdynamic -lc ${LIBCAPC} -o $@
	@$(POST_LINK)

$(ARCHDIR.xf)/$(PROGRAM.reorder): $(ARCHDIR.xf) $(SOURCES) $(TARGETS) $(OBJECTS.xf) 
	$(LINK.cc) -M $(SOURCES.map) $(OBJECTS.xf) $(LDLIBS) -Bdynamic -lc ${LIBCAPC} -o $@
	@$(POST_LINK)

$(ARCHDIR.pure)/$(PROGRAM.pure): $(ARCHDIR.pure) $(SOURCES) $(TARGETS) $(OBJECTS.pure) 
	$(PURIFY) $(PURIFYOPTIONS) $(LINK.cc) $(OBJECTS.pure) $(LDLIBS) -Bdynamic -lc -L/opt/SUNWspro/SC2.0.1 -lC \
                                        -o $@
	@$(POST_LINK)

#
# Convenience targets for building programs.  We create a symbolic link
# to the executable to make it easier to get to.
#
$(PROGRAM): $(ARCHDIR)/$$@
	rm -f $@; ln -s $(ARCHDIR)/$@ .

$(PROGRAM.g): $(ARCHDIR.g)/$$@
	rm -f $@; ln -s $(ARCHDIR.g)/$@ .

$(PROGRAM.pure): $(ARCHDIR.pure)/$$@
	rm -f $@; ln -s $(ARCHDIR.pure)/$@ .

$(PROGRAM.xf) $(PROGRAM.reorder): $(ARCHDIR.xf)/$$@
	rm -f $@; ln -s $(ARCHDIR.xf)/$@ .

# More convenience targets
xf:		$(PROGRAM.xf)
reorder:	$(PROGRAM.reorder)

#
# Archive .o's into static library. 
#
$(ARCHDIR)/$(LIBRARY.a): $(ARCHDIR) $(OBJECTS) $(OBJECTS_SA)
	ar ruv $@ $(OBJECTS) $(OBJECTS_SA)
	$(RANLIB) $@

$(ARCHDIR.g)/$(LIBRARY.a): $(ARCHDIR.g) $(OBJECTS.g) $(OBJECTS_SA.g)
	ar ruv $@ $(OBJECTS.g) $(OBJECTS_SA.g)
	$(RANLIB) $@

$(ARCHDIR.pure)/$(LIBRARY.a): $(ARCHDIR.pure) $(OBJECTS.pure) $(OBJECTS_SA.pure)
	ar ruv $@ $(OBJECTS.pure) $(OBJECTS_SA.pure)
	$(RANLIB) $@

$(ARCHDIR.xf)/$(LIBRARY.a): $(ARCHDIR.xf) $(OBJECTS.xf) $(OBJECTS_SA.xf)
	ar ruv $@ $(OBJECTS.xf) $(OBJECTS_SA.xf)
	$(RANLIB) $@

#
# Link .o's into .so library.  Place a symbolic link in the directory
# where the .a and .sa live so we can find all the libs in one spot
#
$(ARCHDIR.pic)/$(LIBRARY.so): $(ARCHDIR.pic) $(OBJECTS.pic)
	ld $(LIB_LDFLAGS) $(OBJECTS.pic) -o $@
	rm -f $(ARCHDIR)/$(LIBRARY.so); \
	ln -s ../$(ARCHDIR.pic)/$(LIBRARY.so) $(ARCHDIR);\

$(ARCHDIR.pic-g)/$(LIBRARY.so): $(ARCHDIR.pic-g) $(OBJECTS.pic-g)
	ld $(LIB_LDFLAGS) $(OBJECTS.pic-g) -o $@
	rm -f $(ARCHDIR.g)/$(LIBRARY.so); \
	ln -s ../$(ARCHDIR.pic-g)/$(LIBRARY.so) $(ARCHDIR.g);\

#
# Archive .o's into .sa portion of a dynamic library
#
$(ARCHDIR)/$(LIBRARY.sa): $(ARCHDIR) $(OBJECTS_SA)
	ar rv $@ $(OBJECTS_SA)
	$(RANLIB) $@

$(ARCHDIR.g)/$(LIBRARY.sa): $(ARCHDIR.g) $(OBJECTS_SA.g)
	ar rv $@ $(OBJECTS_SA.g)
	$(RANLIB) $@

#
# Convenience targets for libraries.  We place a symbolic link to the
# library in the current directory for convenience.
#
$(LIBRARY.a): $(ARCHDIR)/$(LIBRARY.a)
	rm -f $(LIBRARY.a); ln -s $? .
$(LIBRARY.a)-g: $(ARCHDIR.g)/$(LIBRARY.a)
	rm -f $(LIBRARY.a); ln -s $? .
$(LIBRARY.a)-pure: $(ARCHDIR.pure)/$(LIBRARY.a)
	rm -f $(LIBRARY.a); ln -s $? .
$(LIBRARY.a)-xf: $(ARCHDIR.xf)/$(LIBRARY.a)
	rm -f $(LIBRARY.a); ln -s $? .

$(LIBRARY.sa): $(ARCHDIR)/$(LIBRARY.sa)
	rm -f $(LIBRARY.sa); ln -s $? .
$(LIBRARY.sa)-g: $(ARCHDIR.g)/$(LIBRARY.sa)
	rm -f $(LIBRARY.sa); ln -s $? .

$(LIBRARY.so): $(ARCHDIR.pic)/$(LIBRARY.so)
	rm -f $(LIBRARY.so); ln -s $? .
$(LIBRARY.so)-g: $(ARCHDIR.pic-g)/$(LIBRARY.so)
	rm -f $(LIBRARY.so); ln -s $? .

#
# Target for compiling Tool Talk types file into a Classing Engine file
#
# XXX dipol 10/7/92: This is no longer needed since tooltalk now uses
# straight XDR. We should remove this after the code handoff.
#
$(PROGRAM).types.ce: $(SOURCES.types)
	$(TT_TYPE_COMP) $(SOURCES.types)

#
# Installation.  Tool's individual makefile must define the target "install"
# For example:
#
# install: install_reorder_bins install_info install_man
#

# Install "normal" (non-reordered) binary
install_normal_bins:: $(PROGRAM)
	-@if [ ! -d $(DESTDIR.bin) ]; then \
		mkdir -p $(DESTDIR.bin); \
	fi
	-@rm -f $(DESTDIR.bin)/$(PROGRAM)
	@ $(INSTALL) -m 755 -f $(DESTDIR.bin) $(PROGRAM)
	mcs -d $(DESTDIR.bin)/$(PROGRAM)
	@mcs -a "$(PROGRAM) `grep 'OpenWindows' $(OWVersionFile)` `date +'%e %B %Y'`" $(DESTDIR.bin)/$(PROGRAM)

# Install reordered binary.
install_reorder_bins:: $(ARCHDIR.xf)/$(PROGRAM.reorder)
	-@if [ ! -d $(DESTDIR.bin) ]; then \
		mkdir -p $(DESTDIR.bin); \
	fi
	-@rm -f $(DESTDIR.bin)/$(PROGRAM); \
	$(INSTALL) -m 755 -f $(DESTDIR.bin) $(ARCHDIR.xf)/$(PROGRAM.reorder); \
	echo "Renaming $(PROGRAM.reorder) to $(PROGRAM)"; \
	mv $(DESTDIR.bin)/$(PROGRAM.reorder) $(DESTDIR.bin)/$(PROGRAM)

# Install libraries
install_libs:: install_lib_bins install_lib_links

# Install library binaries
install_lib_bins:: $(ARCHDIR)/$(LIBRARY.a) $(ARCHDIR)/$(LIBRARY.sa) \
			$(ARCHDIR.pic)/$(LIBRARY.so)
	-@if [ ! -d $(DESTDIR.lib) ]; then \
		mkdir -p $(DESTDIR.lib); \
	fi
	-@for i in $(LIBRARIES); do \
		rm -f $(DESTDIR.lib)/$$i; \
		if [ -f $(ARCHDIR)/$$i ]; then \
			$(INSTALL) -m 755 -f $(DESTDIR.lib) $(ARCHDIR)/$$i; \
		elif [ -f $(ARCHDIR.pic)/$$i ]; then \
			$(INSTALL) -m 755 -f $(DESTDIR.lib) $(ARCHDIR.pic)/$$i; \
		fi; \
	done;

# If there is a version number create a symbolic link so we can access
# the library through a name without version numbers.
install_lib_links:: 
	-@if [ ! -d $(DESTDIR.lib) ]; then \
		mkdir -p $(DESTDIR.lib); \
	fi
	-@if [ X$(LIBVERSION) != X ]; then \
	for i in $(LIBLINKS); do \
		if [ -f $(DESTDIR.lib)/$$i$(LIBVERSION) ]; then \
			rm -f $(DESTDIR.lib)/$$i; \
			echo "ln -s ./$$i$(LIBVERSION) $(DESTDIR.lib)/$$i"; \
			ln -s ./$$i$(LIBVERSION) $(DESTDIR.lib)/$$i; \
		fi; \
	done; \
	fi;

# Install shell scripts
install_scripts:: $(SCRIPTS)
	-@if [ ! -d $(DESTDIR.sh) ]; then \
		mkdir -p $(DESTDIR.sh); \
	fi
	-@for i in $(SCRIPTS); do \
		rm -f $(DESTDIR.sh)/$$i; \
		$(INSTALL) -m 755 -f $(DESTDIR.sh) $$i; \
	done

# Install postscript files
install_ps:: $(SOURCES.ps)
	-@if [ ! -d $(DESTDIR.ps) ]; then \
		mkdir -p $(DESTDIR.ps); \
	fi
	-@for i in $(SOURCES.ps); do \
		rm -f $(DESTDIR.ps)/$$i; \
		$(INSTALL) -m 644 -f $(DESTDIR.ps) $$i; \
	done

# Install template files (used with mailtool)
install_tpl:: $(SOURCES.tpl)
	-@if [ ! -d $(DESTDIR.tpl) ]; then \
		mkdir -p $(DESTDIR.tpl); \
	fi
	-@for i in $(SOURCES.tpl); do \
		rm -f $(DESTDIR.tpl)/$$i; \
		$(INSTALL) -m 644 -f $(DESTDIR.tpl) $$i; \
	done

# Install info help files
install_info:: $(SOURCES.info)
	-@if [ ! -d $(DESTDIR.info) ]; then \
		mkdir -p $(DESTDIR.info); \
	fi
	-@for i in $(SOURCES.info); do \
		rm -f $(DESTDIR.info)/$$i; \
		$(INSTALL) -m 644 -f $(DESTDIR.info) $$i; \
	done

# Install man pages
# man section is determined by looking at the man page suffix, e.g.,
# "fooble.3q" goes in section "3q".
#
install_man:: $(SOURCES.man)
	-@for i in $(SOURCES.man); do				\
		MANSECT=`echo $$i | sed -e 's/.*\.//g'`;	\
		MANDIR=$(DESTDIR.man)$$MANSECT;			\
		[ -d $$MANDIR ] || mkdir -p $$MANDIR;		\
		rm -f $$MANDIR/$$i;				\
		$(INSTALL) -m 644 -f $$MANDIR $$i;		\
	done

# Compile types file and merge it into tooltalk database
install_tt_types:: $(SOURCES.types)
	@echo "Merging ToolTalk types into $(DESTDIR.tt)/types.xdr"
	@if [ ! -d $(DESTDIR.tt) ]; then \
		mkdir -p $(DESTDIR.tt); \
	fi
	OPENWINHOME=$(DESTDIR); export OPENWINHOME; \
	for i in $(SOURCES.types); do \
		$(TT_TYPE_COMP) -d network $$i; \
	done

# Install icon files
install_icons:: $(SOURCES.icon)
	-@if [ ! -d $(DESTDIR.icon) ]; then \
		mkdir -p $(DESTDIR.icon); \
	fi
	-@for i in $(SOURCES.icon); do \
		rm -f $(DESTDIR.icon)/$$i; \
		$(INSTALL) -m 644 -f $(DESTDIR.icon) $$i; \
	done

# Install public include
install_public_h:: $(SOURCES.public.h)
	-@if [ ! -d $(DESTDIR.public.h) ]; then \
		mkdir -p $(DESTDIR.public.h); \
	fi
	-@for i in $(SOURCES.public.h); do \
		rm -f $(DESTDIR.public.h)/$$i; \
		$(INSTALL) -m 644 -f $(DESTDIR.public.h) $$i; \
	done

#
# String extraction.
#
strings_single_domain: $(SOURCES.c) $(SOURCES.cc)
	-@if [ ! -d $(DESTDIR.po) ]; then \
		mkdir -p $(DESTDIR.po); \
	fi
	@echo "Extracting strings for docviewer:"
	@$(COMPILE.cc) -E $(SOURCES.cc) | \
		$(XGETTEXT) -d $(TXTDM_PREFIX)$(TEXTDOMAIN) $(XGETTEXT_OPTS)


# This is a hack to enable the message files for helpviewer to be
# generated.
#
HELPDOMAIN	=	HELPVIEWER
MSGDIR_PREFIX	=	$(DESTDIR.po)/$(TXTDM_PREFIX)
strings_help_doc_viewer_single_domain: strings_single_domain
	-@echo "Extracting strings for helpviewer:"
	@cp $(MSGDIR_PREFIX)$(TEXTDOMAIN).po $(MSGDIR_PREFIX)$(HELPDOMAIN).po
	

strings_multi_domain: $(SOURCES.c) $(SOURCES.cc)
	-@if [ ! -d $(DESTDIR.po) ]; then \
		mkdir -p $(DESTDIR.po); \
	fi
	@echo "Extracting strings:"
	@$(COMPILE.cc) -E $(SOURCES.cc) | $(XGETTEXT) $(XGETTEXT_OPTS)


#saber_src: $(SOURCES) $(TARGETS) $(OBJECTS)
#	#load $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH) $(SOURCES.c) $(SOURCES.c) $(TARGETS.c) $(LDLIBS)

#saber_obj: $(OBJECTS) 
#	#load $(CFLAGS) $(LDFLAGS) $(TARGET_ARCH) $(OBJECTS) $(LDLIBS)

#lint:
#	$(LINT.c) $(SOURCES.c)

tags: $(SOURCES.c)
	ctags -w $(SOURCES.c)

etags: $(SOURCES.c)
	etags -w $(SOURCES.c)

master_clean:
	-if [ $(PROGRAM) ]; then \
		rm -f $(PROGRAM) $(PROGRAM.xf) $(PROGRAM.g) \
		       $(PROGRAM.reorder)  $(PROGRAM.pure); \
	fi
	-rm -f core *.o *% *~ tags TAGS *.BAK errs *.ce
	-rm -rf $(ARCHDIR) $(ARCHDIR.g) $(ARCHDIR.xf) $(ARCHDIR.pic) \
		$(ARCHDIR.pic-g) $(ARCHDIR.pure)

master_clobber: master_clean
	sccs clean

FORCE:
