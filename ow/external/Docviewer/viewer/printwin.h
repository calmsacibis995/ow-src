#ifndef	_PRINTWIN_H
#define	_PRINTWIN_H

#ident "@(#)printwin.h	1.3 11/15/96 Copyright 1989 Sun Microsystems, Inc."

#include "common.h"
#include "xvsubwin.h"
#include <xview/panel.h>
#include <doc/docname.h>
#include <doc/list.h>
#include <doc/listx.h>


// Forward class references.
//
class	ABGROUP;
class	DOCUMENT;
class	NOTIFY;
class	WINLIST;
struct	rusage;


// Events generated by PRINTWIN.
//
typedef enum {
	// user selected the "Print Destination" toggle
	PRINT_DESTINATION_EVENT	= 1700,

	// user hit the "Print" button
	PRINT_BUTTON_EVENT	= 1701,

	// "viewprint" has completed successfully
	PRINT_DONE_EVENT	= 1702,

	// "viewprint" failed
	PRINT_FAILED_EVENT	= 1703,

	// user changed value in "# Copies" field
	PRINT_COPIES_EVENT	= 1704,

	// user resized the printwin panel
	PRINT_RESIZE_EVENT	= 1705
} PRINTWIN_EVENT;


// PRINTWIN - Navigator printing window object.
// PRINTWIN displays the printing command window,
// manages the printing dialog, and initiates the actual printing operation.
//
class	PRINTWIN : public SUBWIN {

    private:

	//Frame		print_frame;
	//Panel		print_panel;

	Panel_item	copies_widget;
	Panel_item	totals_widget;

	Panel_item	dest_widget;
	Panel_item	printer_menu;
	Panel_item	print_order;

	Panel_item	print_msg;
	Panel_item	path_widget;
	Panel_item	file_widget;

	Panel_item	print_button;

	int		viewPage;

	// Print Choices list - displays list of documents
	// that can be printed.
	//
	WINLIST		*choices_list;

	// List of documents in Print Selection list.
	//
	LISTX<DOCUMENT*> doc_list;

	// List of currently available printers.
	//
	LIST<STRING>	printer_list;

	// Name of default printer.
	//
	STRING		default_printer;

	// Error and status message handler.
	//
	NOTIFY		*notify;

	// AnswerBooks with which we're currently dealing.
	//
	ABGROUP		*abgroup;

	// Current state of this object.
	//
	OBJECT_STATE	objstate;

	// Adjust widgets to accomodate panel resize.
	//
	void		Resize();

	// Update "total pages" widget, etc., when new document is selected.
	//
	void 		DocSelectEvent();
	void		UpdateCopies();
	void		UpdateTotalPages();
	void		UpdatePrintMode();

	// Initialize the list of available printers.
	//
	void		InitPrinterList();

	STATUS		CheckNumPages();

	// Print the selected item
	//
	void		DoPrint();

	// Handler for PRINTWIN events.
	//
	void		EventHandler(int event, caddr_t event_obj);


    public:

	// PRINTWIN constructor and destructor.
	//
	PRINTWIN()
	{
		notify = NULL;
	}

	~PRINTWIN();

	// Print document referenced by 'docname'.
	// Display print command window if it's not already.
	// Initialize 'Print Choices' scrolling list.
	//
	STATUS	PrintDocument(ABGROUP		*abgroup_arg,
			      const DOCNAME	&docname,
			      const int		currViewPage,
			      ERRSTK &);

	// The event dispatcher just passes PRINTWIN events
	// on to event handler.
	//
	static void	DispatchEvent(	int	event,
					caddr_t	event_obj,
					caddr_t	client_data);

	STATUS		Init(const Frame        base,
			     ERRSTK		&err);

	Xv_opaque	FrameHandle()
	{
		return (frame);
	}
};

#endif	_PRINTWIN_H
