#ifndef	_WINLIST_H
#define	_WINLIST_H

#ident "@(#)winlist.h	1.3 11/15/96 Copyright 1989 Sun Microsystems, Inc."

#include <xview/panel.h>
#include <doc/list.h>
#include <xview/font.h>
#include <xview/scrollbar.h>

typedef Server_image	GLYPH;	// convenient shorthand


// Forward class references
class	ITIMER;


// Events generated by WINLIST.
//
typedef enum {
	WINLIST_SELECT_EVENT	= 601,
	WINLIST_DESELECT_EVENT	= 602,
	WINLIST_EXECUTE_EVENT	= 603
} WINLIST_EVENT;


class WINLIST {

    private:

	// Number of entries in this list.
	//
	int		num_entries;

	// Event handler and accompanying callback argument for
	// WINLIST events.
	//
	EVENT_HANDLER	event_handler;
	caddr_t		event_arg;

	// Save previous event to check for double clicks
	//
	Event		prevEvent;

	// Remember last entry selected for future reference.
	//
	int		last_entry_selected;

	// Default regular and bold fonts associated with this list.
	//
	Xv_font		bold_font;
	Xv_font		regular_font;

	// This list's scrollbar.
	//
	Scrollbar	scrollbar;

	// Members and methods needed for doing batch updates of this list.
	//
	BOOL		batch_mode;
	void		*batch_attrs[ATTR_STANDARD_SIZE];
	int		batch_index;
	LIST<STRING>	batch_strings;
	void		BatchUpdate();

	WINLIST_EVENT	XXXevent;
	static void	NotifyProc(	Panel_list_item	item,
					char		*,
					Xv_opaque	/*client_data*/,
					Panel_list_op	op,
					Event		*event,
					int		entry);

	static void	XXXTimerEvent(caddr_t);
	ITIMER		*timer;		//XXX workaround for XView bug

	// Current state of this object.
	//
	OBJECT_STATE	objstate;


    protected:

	Panel_list_item	win_list;


    public:

	// WINLIST constructor/destructor and initialization routines.
	//
	WINLIST(Xv_opaque panel, int x, int y);
	~WINLIST();

	// Add an entry to the list.
	// 'Label' is the title of the entry.
	// If 'bold' is true, the label is displayed in bold font.
	// If 'glyph' is non-null, it is displayed in the entry along
	// with the label.  If no glyph is specified, none will be displayed.
	//
	void	InsertEntry(	int		entry,
				const STRING	&label,
				BOOL		bold,
				GLYPH		glyph);

	// Variations on the theme of 'InsertEntry()'.
	//
	void	InsertEntry(int n, const STRING &label, GLYPH glyph)
			{ InsertEntry(n, label, BOOL_FALSE, glyph); }

	void	InsertEntry(int n, const STRING &label)
			{ InsertEntry(n, label, BOOL_FALSE, XV_NULL); }

	void	AppendEntry(const STRING &label, BOOL bold, GLYPH glyph)
			{ InsertEntry(NumEntries(), label, bold, glyph); }

	void	AppendEntry(const STRING &label, GLYPH glyp)
			{ InsertEntry(NumEntries(), label, BOOL_FALSE, glyp); }

	void	AppendEntry(const STRING &label)
			{ InsertEntry(NumEntries(), label, BOOL_FALSE, NULL); }

	// Delete specified entry, multiple entries from list.
	//
	void	DeleteEntry(int entry);
	void	DeleteEntries(int start, int count);

	// Update specified entry's label or glyph.
	//
	void	UpdateEntry(int, const STRING &, BOOL bold=BOOL_FALSE);
	void	UpdateEntry(int, GLYPH);

	// Associate an arbitrary cookie with the specified list entry.
	// Retrieve cookie.
	//
	void	SetClientData(int, caddr_t client_data);
	caddr_t	GetClientData(int) const;

	// Delete all entries from list.
	//
	void	Clear();

	// Begin/end batch mode update of contents of this list.
	//
	void	BeginBatch();
	void	EndBatch();

	// Get number of entries in the list.
	//
	int	NumEntries() const	{ return(num_entries); }

	// Get/set the list position of the currently selected entry.
	//
	int	GetSelection() const;
	void	SetSelection(int);
	void	Select(int);
	void	Deselect(int);

	// Is the specified entry selected?
	//
	BOOL	IsSelected(int n) const;

	// Get the last (de)selected entry.
	//
	int	LastEntrySelected() const { return(last_entry_selected); }

	// Fit list in specified area.
	//
	void	FitWidth(int);
	void	FitHeight(int);
	void	Fit(int w, int h)	{ FitWidth(w); FitHeight(h); }

	// Get/set the entry currently at the top/bottom of the display window.
	//
	void	SetViewTop(int n);
	void	SetViewBottom(int b);
	int	GetViewTop();
	int	GetViewBottom();

	// Is entry currently in display window?
	//
	BOOL	InView(int n);

	// Get/set number of rows currently visible in list.
	//
	int	GetViewNumRows();
	void	SetViewNumRows(int n);

	// Get XView handle (Panel_list).
	//
	Xv_opaque	XvHandle()	{ return((Xv_opaque)win_list); }

	// Register event handler for WINLIST events.
	//
	void	SetEventHandler(EVENT_HANDLER func, caddr_t arg)
			{ event_handler = func; event_arg = arg; }
};

#endif	_WINLIST_H
