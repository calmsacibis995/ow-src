#include "audio_i18n.h"
//
// recordctl_ui.cc - User interface object initialization functions.
// This file was generated by `gxv++' from `recordctl.G'.
// DO NOT EDIT BY HAND.
//

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/canvas.h>
#include <xview/panel.h>
#include <xview/scrollbar.h>
#include <xview/svrimage.h>
#include <xview/termsw.h>
#include <xview/text.h>
#include <xview/tty.h>
#include <xview/xv_xrect.h>
#include <group.h>
#include "recordctl_ui.h"

//
// Create object `RecordctlPanel_menu' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_menu_create(caddr_t ip, Xv_opaque owner)
{
	extern Menu_item	recordctl_RecordctlPanel_menu_item0_callback(Menu_item, Menu_generate);
	extern Menu_item	recordctl_RecordctlPanel_menu_item1_callback(Menu_item, Menu_generate);
	Xv_opaque	obj;
	
	obj = xv_create(XV_NULL, MENU_COMMAND_MENU,
		XV_KEY_DATA, INSTANCE, ip,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordctlPanel_menu",
		MENU_TITLE_ITEM, owner ? "" : dgettext("SUNW_DESKSET_AUDIOCONTROL", "Audio Control"),
		MENU_ITEM,
			XV_KEY_DATA, INSTANCE, ip,
			MENU_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Play..."),
			MENU_GEN_PROC, recordctl_RecordctlPanel_menu_item0_callback,
			NULL,
		MENU_ITEM,
			XV_KEY_DATA, INSTANCE, ip,
			MENU_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Status..."),
			MENU_GEN_PROC, recordctl_RecordctlPanel_menu_item1_callback,
			NULL,
		NULL);
	return obj;
}

//
// Initialize an instance of object `RecordctlPanel'.
//
void
recordctl_RecordctlPanel_objects::objects_initialize(Xv_opaque owner)
{
	RecordctlPanel = RecordctlPanel_create(owner);
	RecordctlCanvas = RecordctlCanvas_create(RecordctlPanel);
	Inport0 = Inport0_create(RecordctlCanvas);
	Inport1 = Inport1_create(RecordctlCanvas);
	Inport2 = Inport2_create(RecordctlCanvas);
	RecordInputGroup = RecordInputGroup_create(RecordctlCanvas);
	AutoAdjustMsg = AutoAdjustMsg_create(RecordctlCanvas);
	AutoAdjustMsgGroup = AutoAdjustMsgGroup_create(RecordctlCanvas);
	AutoAdjustButton = AutoAdjustButton_create(RecordctlCanvas);
	AutoAdjustGroup = AutoAdjustGroup_create(RecordctlCanvas);
	RecordVolumeMsg = RecordVolumeMsg_create(RecordctlCanvas);
	RecordVolumeSlider = RecordVolumeSlider_create(RecordctlCanvas);
	RecordSliderGroup = RecordSliderGroup_create(RecordctlCanvas);
	RecordBalanceMsg = RecordBalanceMsg_create(RecordctlCanvas);
	RecordBalanceLeftMsg = RecordBalanceLeftMsg_create(RecordctlCanvas);
	RecordBalanceSlider = RecordBalanceSlider_create(RecordctlCanvas);
	RecordBalanceLeftSliderGroup = RecordBalanceLeftSliderGroup_create(RecordctlCanvas);
	RecordBalanceRightMsg = RecordBalanceRightMsg_create(RecordctlCanvas);
	RecordBalanceSliderGroup = RecordBalanceSliderGroup_create(RecordctlCanvas);
	RecordBalanceGroup = RecordBalanceGroup_create(RecordctlCanvas);
	RecordMonitorMsg = RecordMonitorMsg_create(RecordctlCanvas);
	MonitorVolumeSlider = MonitorVolumeSlider_create(RecordctlCanvas);
	MonitorSliderGroup = MonitorSliderGroup_create(RecordctlCanvas);
	window_fit(RecordctlCanvas);
	
	MeterLowCanvas = MeterLowCanvas_create(RecordctlPanel);
	NosignalMsg = NosignalMsg_create(MeterLowCanvas);
	LowsignalMsg = LowsignalMsg_create(MeterLowCanvas);
	MeterLowGroup = MeterLowGroup_create(MeterLowCanvas);
	window_fit(MeterLowCanvas);
	
	MeterCanvas = MeterCanvas_create(RecordctlPanel);
	MeterGauge = MeterGauge_create(MeterCanvas);
	MeterGroup = MeterGroup_create(MeterCanvas);
	window_fit(MeterCanvas);
	
	MeterHighCanvas = MeterHighCanvas_create(RecordctlPanel);
	PeakMsg = PeakMsg_create(MeterHighCanvas);
	MeterHighGroup = MeterHighGroup_create(MeterHighCanvas);
	window_fit(MeterHighCanvas);
	
	window_fit(RecordctlPanel);
	
	xv_set(RecordctlCanvas,
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
		NULL);
}

//
// Create object `RecordctlPanel' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordctlPanel_create(Xv_opaque owner)
{
	extern void	Recordctl_done_proc(Frame);
	extern Notify_value	recordctl_RecordctlPanel_event_callback(Xv_window, Event *, Notify_arg, Notify_event_type);
	Xv_opaque	obj;
	
	obj = xv_create(owner, FRAME_CMD,
		XV_KEY_DATA, INSTANCE, this,
		XV_WIDTH, 394,
		XV_HEIGHT, 176,
		XV_LABEL, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Audio Control: Record"),
		FRAME_SHOW_FOOTER, TRUE,
		FRAME_SHOW_RESIZE_CORNER, FALSE,
		FRAME_CMD_PUSHPIN_IN, FALSE,
		FRAME_DONE_PROC, Recordctl_done_proc,
		NULL);
	xv_set(obj, WIN_CONSUME_EVENTS,
		NULL, NULL);
	notify_interpose_event_func(obj,
		(Notify_func) recordctl_RecordctlPanel_event_callback, NOTIFY_SAFE);
	return obj;
}

//
// Create object `RecordctlCanvas' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordctlCanvas_create(Xv_opaque owner)
{
	Xv_opaque obj = xv_get(owner, FRAME_CMD_PANEL);
	
	xv_set(obj,
	       XV_KEY_DATA, INSTANCE, this,
	       XV_HELP_DATA, "audiocontrol:recordctl-RecordctlCanvas",
	       WIN_BORDER, TRUE,
	       NULL);
	return obj;
}

//
// Create object `Inport0' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::Inport0_create(Xv_opaque owner)
{
	extern void		Recordctl_inport_proc(Panel_item, unsigned int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TOGGLE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-Inport0",
		XV_X, 10,
		XV_Y, 8,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_NOTIFY_PROC, Recordctl_inport_proc,
		PANEL_CHOICE_STRING, 0, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Microphone"),
		PANEL_VALUE, 0,
		NULL);
	return obj;
}

//
// Create object `Inport1' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::Inport1_create(Xv_opaque owner)
{
	extern void		Recordctl_inport_proc(Panel_item, unsigned int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TOGGLE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-Inport1",
		XV_X, 97,
		XV_Y, 8,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_NOTIFY_PROC, Recordctl_inport_proc,
		PANEL_CHOICE_STRING, 0, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Line In"),
		PANEL_VALUE, 0,
		NULL);
	return obj;
}

//
// Create object `Inport2' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::Inport2_create(Xv_opaque owner)
{
	extern void		Recordctl_inport_proc(Panel_item, unsigned int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TOGGLE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-Inport2",
		XV_X, 154,
		XV_Y, 8,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_NOTIFY_PROC, Recordctl_inport_proc,
		PANEL_CHOICE_STRING, 0, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Internal"),
		PANEL_VALUE, 0,
		NULL);
	return obj;
}

//
// Create object `RecordInputGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordInputGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 10,
		XV_Y, 8,
		GROUP_TYPE, GROUP_ROW,
		GROUP_MEMBERS,
			Inport0,
			Inport1,
			Inport2,
			NULL,
		GROUP_ROW_ALIGNMENT, GROUP_HORIZONTAL_CENTERS,
		GROUP_HORIZONTAL_SPACING, 0,
		GROUP_ANCHOR_OBJ, RecordctlCanvas,
		GROUP_ANCHOR_POINT, GROUP_NORTHWEST,
		GROUP_REFERENCE_POINT, GROUP_NORTHWEST,
		GROUP_HORIZONTAL_OFFSET, 10,
		GROUP_VERTICAL_OFFSET, 8,
		NULL);
	return obj;
}

//
// Create object `AutoAdjustMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::AutoAdjustMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-AutoAdjustMsg",
		XV_X, 31,
		XV_Y, 40,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Press the Auto-Adjust button to set the record volume"),
		PANEL_LABEL_BOLD, FALSE,
		NULL);
	return obj;
}

//
// Create object `AutoAdjustMsgGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::AutoAdjustMsgGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 31,
		XV_Y, 40,
		GROUP_TYPE, GROUP_NONE,
		GROUP_MEMBERS,
			AutoAdjustMsg,
			NULL,
		GROUP_ANCHOR_OBJ, RecordctlCanvas,
		GROUP_ANCHOR_POINT, GROUP_NORTH,
		GROUP_REFERENCE_POINT, GROUP_NORTH,
		GROUP_HORIZONTAL_OFFSET, 0,
		GROUP_VERTICAL_OFFSET, 40,
		NULL);
	return obj;
}

//
// Create object `AutoAdjustButton' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::AutoAdjustButton_create(Xv_opaque owner)
{
	extern void		Recordctl_autoadjust_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_BUTTON,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-AutoAdjustButton",
		XV_X, 290,
		XV_Y, 95,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Auto-Adjust"),
		PANEL_NOTIFY_PROC, Recordctl_autoadjust_proc,
		NULL);
	return obj;
}

//
// Create object `AutoAdjustGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::AutoAdjustGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 290,
		XV_Y, 95,
		GROUP_TYPE, GROUP_NONE,
		GROUP_MEMBERS,
			AutoAdjustButton,
			NULL,
		NULL);
	return obj;
}

//
// Create object `RecordVolumeMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordVolumeMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordVolumeMsg",
		XV_X, 15,
		XV_Y, 98,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Record Volume:"),
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

//
// Create object `RecordVolumeSlider' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordVolumeSlider_create(Xv_opaque owner)
{
	extern void		Recordctl_volume_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_SLIDER,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordVolumeSlider",
		XV_X, 128,
		XV_Y, 98,
		PANEL_SLIDER_WIDTH, 100,
		PANEL_TICKS, 0,
		PANEL_DIRECTION, PANEL_HORIZONTAL,
		PANEL_SLIDER_END_BOXES, FALSE,
		PANEL_SHOW_RANGE, FALSE,
		PANEL_SHOW_VALUE, TRUE,
		PANEL_MIN_VALUE, 0,
		PANEL_MAX_VALUE, 100,
		PANEL_MIN_VALUE_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "0"),
		PANEL_MAX_VALUE_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "100"),
		PANEL_VALUE, 0,
		PANEL_NOTIFY_PROC, Recordctl_volume_proc,
		NULL);
	return obj;
}

//
// Create object `RecordSliderGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordSliderGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 15,
		XV_Y, 98,
		GROUP_TYPE, GROUP_ROW,
		GROUP_MEMBERS,
			RecordVolumeMsg,
			RecordVolumeSlider,
			NULL,
		GROUP_ROW_ALIGNMENT, GROUP_TOP_EDGES,
		GROUP_HORIZONTAL_SPACING, 8,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordBalanceMsg",
		XV_X, 63,
		XV_Y, 122,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Balance:"),
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceLeftMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceLeftMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordBalanceLeftMsg",
		XV_X, 133,
		XV_Y, 122,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Left"),
		PANEL_LABEL_BOLD, FALSE,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceSlider' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceSlider_create(Xv_opaque owner)
{
	extern void		Recordctl_balance_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_SLIDER,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordBalanceSlider",
		XV_X, 170,
		XV_Y, 122,
		PANEL_SLIDER_WIDTH, 100,
		PANEL_TICKS, 3,
		PANEL_DIRECTION, PANEL_HORIZONTAL,
		PANEL_SLIDER_END_BOXES, FALSE,
		PANEL_SHOW_RANGE, FALSE,
		PANEL_SHOW_VALUE, FALSE,
		PANEL_MIN_VALUE, 0,
		PANEL_MAX_VALUE, 64,
		PANEL_VALUE, 32,
		PANEL_NOTIFY_PROC, Recordctl_balance_proc,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceLeftSliderGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceLeftSliderGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 133,
		XV_Y, 122,
		GROUP_TYPE, GROUP_ROW,
		GROUP_MEMBERS,
			RecordBalanceLeftMsg,
			RecordBalanceSlider,
			NULL,
		GROUP_ROW_ALIGNMENT, GROUP_TOP_EDGES,
		GROUP_HORIZONTAL_SPACING, 14,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceRightMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceRightMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordBalanceRightMsg",
		XV_X, 292,
		XV_Y, 122,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Right"),
		PANEL_LABEL_BOLD, FALSE,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceSliderGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceSliderGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 133,
		XV_Y, 122,
		GROUP_TYPE, GROUP_ROW,
		GROUP_MEMBERS,
			RecordBalanceLeftSliderGroup,
			RecordBalanceRightMsg,
			NULL,
		GROUP_ROW_ALIGNMENT, GROUP_TOP_EDGES,
		GROUP_HORIZONTAL_SPACING, 6,
		NULL);
	return obj;
}

//
// Create object `RecordBalanceGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordBalanceGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 63,
		XV_Y, 122,
		GROUP_TYPE, GROUP_ROW,
		GROUP_MEMBERS,
			RecordBalanceMsg,
			RecordBalanceSliderGroup,
			NULL,
		GROUP_ROW_ALIGNMENT, GROUP_TOP_EDGES,
		GROUP_HORIZONTAL_SPACING, 13,
		NULL);
	return obj;
}

//
// Create object `RecordMonitorMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::RecordMonitorMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-RecordMonitorMsg",
		XV_X, 8,
		XV_Y, 152,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Monitor Volume:"),
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

//
// Create object `MonitorVolumeSlider' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MonitorVolumeSlider_create(Xv_opaque owner)
{
	extern void		Recordctl_monitor_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_SLIDER,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-MonitorVolumeSlider",
		XV_X, 128,
		XV_Y, 152,
		PANEL_SLIDER_WIDTH, 100,
		PANEL_TICKS, 0,
		PANEL_DIRECTION, PANEL_HORIZONTAL,
		PANEL_SLIDER_END_BOXES, FALSE,
		PANEL_SHOW_RANGE, FALSE,
		PANEL_SHOW_VALUE, TRUE,
		PANEL_MIN_VALUE, 0,
		PANEL_MAX_VALUE, 100,
		PANEL_MIN_VALUE_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "0"),
		PANEL_MAX_VALUE_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "100"),
		PANEL_VALUE, 0,
		PANEL_NOTIFY_PROC, Recordctl_monitor_proc,
		NULL);
	return obj;
}

//
// Create object `MonitorSliderGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MonitorSliderGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 8,
		XV_Y, 152,
		GROUP_TYPE, GROUP_ROW,
		GROUP_MEMBERS,
			RecordMonitorMsg,
			MonitorVolumeSlider,
			NULL,
		GROUP_ROW_ALIGNMENT, GROUP_TOP_EDGES,
		GROUP_HORIZONTAL_SPACING, 8,
		NULL);
	return obj;
}

//
// Create object `MeterLowCanvas' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterLowCanvas_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-MeterLowCanvas",
		XV_X, 42,
		XV_Y, 60,
		XV_WIDTH, 90,
		XV_HEIGHT, 25,
		WIN_BORDER, FALSE,
		WIN_USE_IM, FALSE,
		NULL);
	return obj;
}

//
// Create object `NosignalMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::NosignalMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-NosignalMsg",
		XV_X, 5,
		XV_Y, 6,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "No Signal"),
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

//
// Create object `LowsignalMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::LowsignalMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-LowsignalMsg",
		XV_X, 5,
		XV_Y, 6,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Low Signal"),
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

//
// Create object `MeterLowGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterLowGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 5,
		XV_Y, 6,
		GROUP_TYPE, GROUP_ROWCOLUMN,
		GROUP_MEMBERS,
			LowsignalMsg,
			NosignalMsg,
			NULL,
		GROUP_ROWS, 2,
		GROUP_ROW_ALIGNMENT, GROUP_TOP_EDGES,
		GROUP_COLUMN_ALIGNMENT, GROUP_LEFT_EDGES,
		GROUP_HORIZONTAL_SPACING, 0,
		GROUP_VERTICAL_SPACING, -13,
		GROUP_ANCHOR_OBJ, MeterLowCanvas,
		GROUP_ANCHOR_POINT, GROUP_WEST,
		GROUP_REFERENCE_POINT, GROUP_WEST,
		GROUP_HORIZONTAL_OFFSET, 5,
		GROUP_VERTICAL_OFFSET, 0,
		NULL);
	return obj;
}

//
// Create object `MeterCanvas' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterCanvas_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-MeterCanvas",
		XV_X, 130,
		XV_Y, 60,
		XV_WIDTH, 134,
		XV_HEIGHT, 25,
		WIN_BORDER, FALSE,
		WIN_USE_IM, FALSE,
		NULL);
	return obj;
}

//
// Create object `MeterGauge' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterGauge_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_GAUGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-MeterGauge",
		XV_X, 4,
		XV_Y, 7,
		PANEL_GAUGE_WIDTH, 110,
		PANEL_TICKS, 0,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_DIRECTION, PANEL_HORIZONTAL,
		PANEL_SHOW_RANGE, FALSE,
		PANEL_MIN_VALUE, 0,
		PANEL_MAX_VALUE, 10,
		PANEL_VALUE, 0,
		NULL);
	return obj;
}

//
// Create object `MeterGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 4,
		XV_Y, 7,
		GROUP_TYPE, GROUP_NONE,
		GROUP_MEMBERS,
			MeterGauge,
			NULL,
		GROUP_ANCHOR_OBJ, MeterCanvas,
		GROUP_ANCHOR_POINT, GROUP_CENTER,
		GROUP_REFERENCE_POINT, GROUP_CENTER,
		GROUP_HORIZONTAL_OFFSET, 0,
		GROUP_VERTICAL_OFFSET, 0,
		NULL);
	return obj;
}

//
// Create object `MeterHighCanvas' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterHighCanvas_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-MeterHighCanvas",
		XV_X, 262,
		XV_Y, 60,
		XV_WIDTH, 90,
		XV_HEIGHT, 25,
		WIN_BORDER, FALSE,
		WIN_USE_IM, FALSE,
		NULL);
	return obj;
}

//
// Create object `PeakMsg' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::PeakMsg_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, this,
		XV_HELP_DATA, "audiocontrol:recordctl-PeakMsg",
		XV_X, 8,
		XV_Y, 6,
		PANEL_LABEL_STRING, dgettext("SUNW_DESKSET_AUDIOCONTROL", "Peak"),
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

//
// Create object `MeterHighGroup' in the specified instance.
//
Xv_opaque
recordctl_RecordctlPanel_objects::MeterHighGroup_create(Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, GROUP,
		XV_KEY_DATA, INSTANCE, this,
		XV_X, 8,
		XV_Y, 6,
		GROUP_TYPE, GROUP_NONE,
		GROUP_MEMBERS,
			PeakMsg,
			NULL,
		GROUP_ANCHOR_OBJ, MeterHighCanvas,
		GROUP_ANCHOR_POINT, GROUP_WEST,
		GROUP_REFERENCE_POINT, GROUP_WEST,
		GROUP_HORIZONTAL_OFFSET, 8,
		GROUP_VERTICAL_OFFSET, 0,
		NULL);
	return obj;
}

