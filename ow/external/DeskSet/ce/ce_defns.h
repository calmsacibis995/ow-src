/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>



/* This file was created from "ce_defns.x" by RPCGEN. Only "ce_defns.x"
 * should be modified
 */

#ifndef	ce_defns_h
#define	ce_defns_h

#include	<rpc/rpc.h>

#include 	<sys/types.h>
#include	"ce_err.h"
#define	BOOLEAN unsigned char

struct CE_ATTR {
	char *a_name;
	int a_id;
	short db_id;
	u_int flags;
	struct CE_ATTR *next_attr;
};
typedef struct CE_ATTR CE_ATTR;
bool_t xdr_CE_ATTR();

typedef CE_ATTR *attr_list;
bool_t xdr_attr_list();
typedef struct old_info {
	char		*old_val;
	char		*old_type;
} OLD_INFO;
bool_t xdr_OLD_INFO ();

struct CE_AV {
	char *a_id;
	char *a_type;
	int a_size;
	char *a_val;
	u_int flags;
	OLD_INFO *old_info;
	struct CE_AV *next_av;
};
typedef struct CE_AV CE_AV;
bool_t xdr_CE_AV();

typedef CE_AV *av_list;
bool_t xdr_av_list();

struct CE_ENT {
	int ent_id;
	short db_id;
	av_list avs;
	int match_size;
	struct {
		u_int match_vals_len;
		char *match_vals_val;
	} match_vals;
	u_int flags;
	struct CE_ENT *next_entry;
};
typedef struct CE_ENT CE_ENT;
bool_t xdr_CE_ENT();

typedef CE_ENT *entry_list;
bool_t xdr_entry_list();
typedef struct ns_mgr_struct {
	char		*shared_lib_name;	/* name of shared lib with NS mgr code */
	void		*ns_mgr_handle;		/* NS manager handle - from dlopen ()  */
	int		(*init_ns_mgr) ();	/* ptr to ns manager init routine - from dlsym */
	int		(*build_func) ();	/* ptr to build func  */
	int		(*match_func) ();	/* ptr to compile func */
	int		(*get_entry_cookie) ();	/* ptr to get cookie function */
	int		(*match_entry_cookie) (); /* ptr to cookie match function */
} NS_MGR_INFO;
bool_t	xdr_NS_MGR_INFO ();

struct CE_NS {
	char *ns_name;
	short db_id;
	int num_attrs;
	attr_list attr_def;
	attr_list rt_list;
	int num_ents;
	entry_list entries;
	NS_MGR_INFO *ns_mgr_ptr;
	u_int flags;
	struct CE_NS *next_ns;
};
typedef struct CE_NS CE_NS;
bool_t xdr_CE_NS();

typedef CE_NS *ns_list;
bool_t xdr_ns_list();

struct CE_DB {
	char *db_name;
	char *db_path;
	int dd;
	int num_ns;
	ns_list namespaces;
};
typedef struct CE_DB CE_DB;
bool_t xdr_CE_DB();

typedef CE_DB *ce_db_p;
bool_t xdr_ce_db_p();
#endif ce_defns_h
#define is_new(flag)		(flag&0x00000001)
#define is_deleted(flag)	(flag&0x00000002)
#define is_modified(flag)	(flag&0x00000004)
#define is_last(flag)		(flag&0x00000008)
#define is_ns_entry(flag)	(flag&0x00000010)
#define is_alloced(flag)	(flag&0x00000020)
#define is_added(flag)		(flag&0x00000040)
#define is_connected(flag)	(flag&0x00000080)
#define is_chained_to(flag)	(flag&0x00000100)

#define set_new(flag)		flag = (flag|0x00000001)
#define unset_new(flag)	flag = (flag&0xfffffffe)
#define set_deleted(flag)	flag = (flag|0x00000002)
#define unset_deleted(flag)   	flag = (flag&0xfffffffd)
#define set_modified(flag)	flag = (flag|0x00000004)
#define unset_modified(flag)	flag = (flag&0xfffffffb)
#define set_last(flag)		flag = (flag|0x00000008)
#define unset_last(flag)	flag = (flag&0xfffffff7)
#define set_ns_entry(flag)	flag = (flag|0x00000010)
#define set_alloced(flag)	flag = (flag|0x00000020)
#define unset_alloced(flag)	flag = (flag&0xffffffdf)
#define set_added(flag)	flag = (flag|0x00000040)
#define unset_added(flag)	flag = (flag&0xffffffbf)
#define set_connected(flag)	flag = (flag|0x00000080)
#define unset_connected(flag)	flag = (flag&0xffffff7f)
#define set_chained_to(flag)	flag = (flag|0x00000100)
#define unset_chained_to(flag)	flag = (flag&0xfffffeff)

static char user_db_name [] = "user";
static char system_db_name [] = "system";
static char network_db_name [] = "network";
static char ns_mgr_name [] = "NS_MANAGER";
static char chained_to_attr [] = "CHAINED_TO";
static char chained_to_type [] = "entry_cookie";
static char ns_entry_cookie [] = "NS_ENTRY";
static char ce_database_magic [] = "Classing Engine Data File ";
static char ce_database_version [] = "Version 1.0aaa\n";

typedef struct db_struct	{
	int	num_db;
	time_t  *db_mtimes;
	char	**db_names;
	char	**db_paths;
	CE_DB	**ce_db_ptrs;
	CE_DB	*master_db_list;
} MASTER_DB;

#define USER_DB 	0
#define SYSTEM_DB	1
#define NETWORK_DB	2

#define WRITE_DB	0
#define READ_DB	1
#define UNLOCK_DB	3
#define OPEN_DB_FOR_READ	4
#define OPEN_DB_FOR_WRITE	5
#define TEST_OK_TO_READ	6
#define TEST_OK_TO_WRITE	7
#define CLOSE_DB		8
#define SET_DB_FILENAME	9
/* CE API flags */
#define	CE_FLAG_TEST_ALL		0
#define	CE_FLAG_TEST_PERMISSIONS	1
