%!PS-Adobe-1.0
%%Title: Sun Raster Dump
%%Creator: rash utility
%%CreationDate: $d
%%Pages: 1
%
% @(#)default.rash	1.7 10/15/90  
% Copyright 1990 Sun Microsystems Inc.
%
% This is a wrapper for the PreLimn `rash` filter. It provides single
% page output of a Sun rasterfile.   It directly supports the rash
% options:
%
%     -<n>x<m>
%          Scale the image by a factor  of  n  in  the  horizontal
%          direction and m in the vertical direction.  The
%          unit of measure for this option is device pixels.
%
%     -s <w> <h>
%          Scale the image to  the  specified  width  and  height.
%
%     -l <x> <y>
%          Locate the lower left corner  of  the  image  (<x>,<y>)
%          from the lower left corner of the page.
%
%     -c <x> <y>
%          Locate the center  of  the  image  (<x>,<y>)  from  the
%          center of the page.
%
%     -R <n>
%          Rotate the image to the specified  angle,  in  degrees.
%
%     -i   Reduce the scale, if necessary, to an  integral  number
%          of  pixels  output  for  each  pixel  input.
%
%     -n   Do not output a showpage at the end of the file.   
%
%     -r   Print in landscape orientation.
%
% Other rash options, are supported internally to the rash program.
% (For example, -S, -H and -W are translated into -s).
%
% x-scale and y-scale may be zero; in this case, the raster is
% automatically scaled to fill as much of the page as possible.
% The wrapper MUST be prepared to handle scale factors of 0.
%
%  rash is designed to work with  the  Lambda  capabilities  of
%  PreLimn,  (pl(1)),  part  of the NeWSprint package.  It uses
%  the following Lambda directives.  (Directives must be preceded by a
%  dollar sign, but if I put the sign in the comment, rash will
%  substitute for it....)
%
%           b   Depth of raster planes (either 1 or  8).   
%
%           c   The word  "true"  if  image  should  be  centered,
%               "false" otherwise
%
%           d   Current time and date
%
%           h   Raster Hexadecimal
%
%           i   The word "true" if scale  should  be  adjusted  so
%               that  raster  is scaled by an integral multiple of
%               pixels, "false" otherwise
%
%           l   The word "true" if  image  should  be  printed  in
%               landscape orientation, "false" otherwise
%
%           n   Number of colors in image data (1 or 3)
%
%           p   The word "true" if scale unit  is  device  pixels,
%               "false" otherwise
%
%           r   Angle of rotation
%
%           sx  Scale in x direction. Important: this will be  0.0
%               if no size argument was specified.
%
%           sy  Scale in y direction. Important: this will be  0.0
%               if no size argument was specified.
%
%           x   Width of raster
%
%           y   Height of raster
%
%           B   Substitutes the  four  coordinates  of  the  image
%               bounding  box.   This  is designed to  support the
%               %%BoundingBox comment for EPSF and will return all
%               zeroes unless the -e option has been specified.
%
%           S   Substitues the word  "showpage"  unless  '-n'  has
%               been specified.
%
%           X   Horizontal position offset
%
%           Y   Vertical position offset
%
%%EndComments
32 dict begin
    /min where {pop} {/min {2 copy lt {pop} {exch pop} ifelse} bind def} ifelse
    /max where {pop} {/max {2 copy gt {pop} {exch pop} ifelse} bind def} ifelse

    /ras-width $x def
    /ras-height $y def
    /ras-depth $b def
    /x-scale $sx def
    /y-scale $sy def
    /scale-is-pixels $p def
    /x-pos $X def
    /y-pos $Y def
    /center-image $c def
    /integral-pixels $i def
    /landscape $l def
    /numcolors $n def
    /rotation-angle $r def

    % If we're auto scaling, we need device coordinates.
    x-scale 0.0 eq y-scale 0.0 eq or
    scale-is-pixels or
    {
	% Reset the scale to device coords.
	% Have to adjust the units of x-pos and y-pos accordingly.
	x-pos y-pos dtransform

	initmatrix
	1 1 dtransform
	abs 1 exch div exch abs 1 exch div exch
	scale

	/x-scale x-scale ras-width mul def
	/y-scale y-scale ras-height mul def

	idtransform /y-pos exch def /x-pos exch def
    } if

    % Find the width and height of the page.
    gsave
      clippath pathbbox 
      2 index sub /page-height exch def
      2 index sub /page-width exch def
      /page-miny exch def
      /page-minx exch def
    grestore

    %
    % Buffer size will be 1 scanline wide for monochrome and 1/3 of a
    % scanline wide for color.
    %
    /imagebuf ras-width 8 ras-depth sub add 8 ras-depth idiv div cvi string def

    landscape
    {
	% Find the right edge of the page.  Strictly speaking, we
	% can't,  but we can retain the relationship between (0,0)
	% and the edge of the imageable area by adding the left
	% margin to the right edge of the imageable area.
	gsave clippath pathbbox grestore
	pop exch pop add 0 translate
	90 rotate
    } if

    gsave

    %
    % If center-image was requested, start now by translating the
    % origin to the center of the imageable area.  We'll finish the
    % job later.
    %
    center-image {
	gsave clippath pathbbox grestore
	2 div exch 2 div 4 -1 roll add 3 1 roll add translate

	x-pos y-pos translate
    }{
	x-pos y-pos translate
	% Now fudge these to make auto-scale happy.
	/x-pos x-pos page-minx sub def
	/y-pos y-pos page-miny sub def
    } ifelse

    rotation-angle rotate

    x-scale 0.0 eq y-scale 0.0 eq or 
    {
	%
	% Compute scale (and possibly orientation) to fill up as much
	% of the page as possible while preserving the raster's
	% original aspect ratio.  If the user specified landscape, or
	% rotated the picture, don't touch the orientation.
	% Otherwise, find whichever orientation matches the raster.
	%
	landscape not rotation-angle 0 eq and 
	ras-width ras-height gt page-width page-height gt ne and
	{
	    center-image not {
		gsave clippath pathbbox grestore
		pop exch pop add 0 translate
	    } if
	    90 rotate
	} if

	%
	% Now find the right scale factor, by projecting the sides of
	% the original rectangle onto the baseline and mapping the sum
	% of their sizes to the size of the baseline.   Then do it
	% again projecting onto the side line, and take the minimum.
	% This method should work correctly for an arbitrary rotation
	% angle. 
	%
	% Add x-pos and y-pos to the raster's dimensions to avoid
	% clipping. 

	ras-width x-pos add 0 dtransform pop abs
	0 ras-height y-pos add dtransform pop abs 
	add page-width exch div

	ras-width x-pos add 0 dtransform exch pop abs
	0 ras-height y-pos add dtransform exch pop abs 
	add page-height exch div

	min dup scale
	ras-width ras-height scale
    }{
	x-scale y-scale scale
    } ifelse

    integral-pixels {
	% Can't handle rotation unless it's a multiple of 90
	% degrees, and each case must be handled separately.
	matrix currentmatrix 1 get 0 eq
	{
	    % CTM[1] == 0 implies we're oriented horizontally.
	    1 1 dtransform
	    abs ras-height div dup cvi exch div exch
	    abs ras-width div dup cvi exch div exch
	    scale
	} if
	matrix currentmatrix 0 get 0 eq
	{
	    % CTM[0] == 0 implies we're oriented vertically.
	    1 1 dtransform
	    abs ras-width div dup cvi exch div exch
	    abs ras-height div dup cvi exch div exch
	    scale
	} if
    } if

    center-image {
	% translate to where the lower-left corner of the raster belongs.
	% Since the size of the raster is exactly currentscale, the
	% lower left corner is at (-.5, -.5) in user coords.
	-0.5 -0.5 translate
    } if

    %
    % This function calls image or colorimage as appropriate.  In the
    % case where color data is supplied but colorimage isn't defined,
    % it attempts to recover by supplying a read proc that
    % translates rgb pixels to luminance values.   The proc requires
    % 8-bit samples, which is the only size rash (currently) produces.
    %
    /image_raster {
	dup 1 eq {
	    pop pop image
	}{
	    /colorimage where {
		pop colorimage
	    }{
		pop pop pop		% leaves w h d mat
		(%%[ color image sent to printer with no colorimage\
operator!\n) print
		1 index 8 ne {
		    (    Can't recover--flushing file. ]%%\n) print
		    currentfile flushfile
		}{  
		    (    Converting to grays. ]%%\n) print

		    /imagebuf 3 string def
		    /str1 1 string def
		    {
			str1 dup 0
			currentfile imagebuf readhexstring pop
			{} forall		% put bytes on stack
			.11 mul exch .59 mul add exch .3 mul add
			round cvi put
		    } bind image 
	        } ifelse
	    } ifelse
	} ifelse
    } def

%%EndProlog
%%Page: 1 1
    ras-width ras-height ras-depth [ $x 0 0 $y 0 0 ] 
    { currentfile imagebuf readhexstring pop } bind
    false numcolors image_raster
$h
    grestore
    $S
%%Trailer
end
